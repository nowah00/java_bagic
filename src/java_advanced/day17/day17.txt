익명클래스 (Anonymous Class)
내부(inner)클래스의 일종으로 이름이 없는 클래스
프로그램에서 일시적으로 한번만 사용되고 버려지는 객체(일회용)
어떤 클래스의 자원을 상속 받아 재정의하여 사용하기 위해서는
먼저 자식이 될 클래스를 만들고 extends 후 객체 인스턴스 초기화가 가능하다.

- 필요성
    클래스 정의 없이 메소드 내에서 바로 클래스를 생성하여 인스턴스화 할 수 있다.
    단 한번 만 사용할 수 있도, 익명으로 정의된 클래스는 일회성으로 사용되고 버려짐.
    이는 자식클래스가 한번만 사용되는 자료형이면
    부모클래스에 정의하는 것 보다는 지역변수처럼, 익명 클래스로 정의하고
    스택이 끝나면 삭제되도록 아여 유지보수나 메모리 관리 측면에서 이점을 얻을 수 있다.

    코드의 길이를 줄이고 가독성을 높이는 방법 중 하나이다.
    -> UI 이벤트 처리, 스레드 객체, 이벤트 루프
    * 사용 시 주의점
    익명클래스 방식은 오버라이딩한 메소드만 사용이 가능하다.
    새로 정의한 메소드는 외부에서만 사용이 불가능하다.

    익명객체 가장 많이 활용
    인터페이스 익명구현 객체(메소드의 아규먼트로 일회성 객체를 넘겨주는 방법)


람다식은 java8에 도입되었고, 함수형 프로그래밍 구조를 다룰 때 자바 코드 작성을 하는데 변화를 가져왔다.

@Functionallnterface
단일 메서드 인터페이스 (함수형 인터페이스)
인터페이스가 단 하나의 추상메소드를 가지고 있다.

인스턴스를 보다 명확하고 간결하게 표현할 수 있는 메소드를 제공합니다.

----------------------------------------------------------------------------------------------------
정의
람다식은 함수형 인터페이스를 인스턴스화 하는데 사용되는 익명함수
자바에서는 함수형 인터페이스는 하나의 추상메소드만 포함하는 인터페이스이다.
람다 구현식은 이 단일 메소드의 구현을 제공할 수 있어, 보다 간결하고 통합된 코드 베이스를 가능하게 한다.



----------------------------------------------------------------------------------------------------
함수형 인터페이스
자바는 람다 표현식으로 구현할 수 있는 타입을 정의하기 위해
함수형 인터페이스 개념을 사용한다.

java.util.function 패키지에서 다양한 수와 타입의 인수를 받을 수 있는 함수형 인터페이스를 제공하고 있다.

주요 함수형 인터페이스
1. Predicate<T> 하나의 인수에 대한 boolean 값을 가지는 함수
   Predicate<String> isEmpty = str -> str.isEmpty();

2. Function<T,R> T 타입의 인수를 받아 R 타입의 결과를 반환하는 함수
   Function<String,Integer> length = str -> str.length();

3. Consumer<T> 단일 입력을 받아 수락(사용)하고 결과를 반환하지 않는 함수

4. Suppiler<T> 값을 반환하는 메소드를 제공하는 결과의 공급자 함수
   Suppiler<String> greet = () -> "Hello, lambda"

5. BiFunction<T,U,R> 두 개의 아규먼트를 받아 결과를 생성하는 함수

간결한 (보일러플레이트 코드를 줄여준다.) 별도의 클래스나 익명클래스를 만들 필요없이 간단한 콜백이나 함수형 인터페이스를 구현할 수 있게 한다.

기능향상